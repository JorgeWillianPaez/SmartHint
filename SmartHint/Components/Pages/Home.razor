@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject SmartHint.Data.SmartHintDbContext DB
@using SmartHint.Models
@inject IJSRuntime JSRuntime

<PageTitle>Início</PageTitle>

<div class="d-flex align-items-center justify-content-between mb-4">
    <h4 class="w-75">
        Consulte os seus Clientes cadastrados na
        sua Loja ou realize o cadastro de novos Clientes
    </h4>
    <a class="btn btn-primary" href="clientes/create">Adicionar Cliente</a>
</div>
<div class="d-flex align-items-center mb-4">
    <button onclick="@LimparFiltros" class="btn btn-primary col-2">Limpar filtros</button>
    <button onclick="@MostrarFiltros" class="btn btn-primary col-1 mx-3">Filtrar</button>
    @if (mostrarFiltros)
    {
        <button onclick="@FiltrarClientes" class="btn btn-primary">Aplicar filtros</button>
    }
</div>

@if (clientes is null)
{
    <p><em>Carregando...</em></p>
} else
{
        @if (mostrarFiltros)
        {
            <div class="filtros mb-3">
                <div class="row gx-4 mb-3">
                    <div class="input-group col">
                        <input value="@filtroNomeInput" @oninput="AtualizarFiltroNome" id="nomeclienterazaosocial" placeholder="Nome ou Razão Social do Cliente" class="form-control" />
                        <button class="btn btn-danger" @onclick='() => LimparFiltroEspecifico("nome")'>
                            <img class="btn_lixeira" src="assets/trash.png" alt="Lixeira filtro" />
                        </button>
                    </div>
                    <div class="input-group col">
                        <input value="@filtroDataInputFormatada" @oninput="AtualizarFiltroData" id="dataCadastro" onfocus="(this.type='date')" placeholder="Selecione uma data ou período" class="form-control" />
                        <button class="btn btn-danger" @onclick='() => LimparFiltroEspecifico("data")'>
                            <img class="btn_lixeira" src="assets/trash.png" alt="Lixeira filtro" />
                        </button>
                    </div>
                    <div class="input-group col">
                    <InputMask @bind-Value="filtroTelefoneInput" @oninput="AtualizarFiltroTelefone" id="telefone" onkeypress="return event.charCode >= 48 && event.charCode <= 57" data-mask="(00)00000-0000" placeholder="Telefone do Cliente" class="form-control" />
                        <button class="btn btn-danger" @onclick='() => LimparFiltroEspecifico("telefone")'>
                            <img class="btn_lixeira" src="assets/trash.png" alt="Lixeira filtro" />
                        </button>
                    </div>
                </div>
                <div class="row">
                    <div class="input-group col">
                        <input value="@filtroEmailInput" @oninput="AtualizarFiltroEmail" id="email" placeholder="E-mail do Cliente" class="form-control" />
                        <button class="btn btn-danger" @onclick='() => LimparFiltroEspecifico("email")'>
                            <img class="btn_lixeira" src="assets/trash.png" alt="Lixeira filtro" />
                        </button>
                    </div>
                    <div class="d-flex align-items-center col">
                        <label for="bloqueado" class="form-label m-0">Bloqueado:</label>
                        <div class="input-group">
                            <select value="@filtroBloqueadoInput" @onchange="AtualizarFiltroBloqueado" id="bloqueado" class="form-control">
                                <option value="">Selecione uma opção</option>
                                <option value="Sim">Sim</option>
                                <option value="Nao">Não</option>
                            </select>
                            <button class="btn btn-danger" @onclick='() => LimparFiltroEspecifico("bloqueado")' >
                                <img class="btn_lixeira" src="assets/trash.png" alt="Lixeira filtro" />
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">
                    <input type="checkbox" id="selectAll" @onchange="@((ChangeEventArgs args) => HandleCheckboxChange(args))" />
                    </th>
                    <th scope="col">Nome/Razão Social</th>
                    <th scope="col">E-mail</th>
                    <th scope="col">Telefone</th>
                    <th scope="col">Data de Cadastro</th>
                    <th scope="col">Bloqueado</th>
                    <th scope="col">Ações</th>
                </tr>
            </thead>
            <tbody>
            @if (clientes.Count() > 0)
            {
                @foreach(Cliente cliente in clientes)
                {
                    <tr>
                        <td>
                            <input type="checkbox" class="clienteCheckbox" data-cliente-id="@cliente.Id" />
                        </td>
                        <td>@cliente.NomeClienteRazaoSocial</td>
                        <td>@cliente.Email</td>
                        <td>@cliente.Telefone</td>
                        <td>@cliente.DataCadastro.ToString("dd/MM/yyyy")</td>
                        @if (cliente.Bloqueado == true)
                        {
                            <td>Sim</td>
                        }
                        else
                        {
                            <td>Não</td>
                        }
                        <td>
                            <a class="btn btn-primary" href="@($"clientes/edit?id={@cliente.Id}")">Editar</a>
                        </td>
                    </tr>
                }
            } else
            {
                <tr>
                    <td colspan="7">Nenhum cliente cadastrado...</td>
                </tr>
            }
            </tbody>
        </table>
    <Pagination ActivePageNumber="@paginaAtual"
                TotalPages="totalPaginas"
                PageChanged="OnPageChangedAsync" class="d-flex justify-content-center" />
}

@code {
    private IEnumerable<Cliente> clientes = default!;
    private bool mostrarFiltros = false;
    private string filtroDataInputFormatada
    {
        get => filtroDataInput?.ToString("yyyy-MM-dd");
        set
        {
            if (DateTime.TryParse(value, out DateTime result))
                filtroDataInput = result;
            else
                filtroDataInput = null;
        }
    }
    private string filtroNome = string.Empty;
    private string filtroNomeInput = string.Empty;
    private string filtroEmail = string.Empty;
    private string filtroEmailInput = string.Empty;
    private string filtroTelefone = string.Empty;
    private string filtroTelefoneInput = string.Empty;
    private DateTime? filtroData = null;
    private DateTime? filtroDataInput = null;
    private string filtroBloqueado = string.Empty;
    private string filtroBloqueadoInput = string.Empty;

    private IJSObjectReference? module;

    private int paginaAtual = 1;
    private int totalPaginas = 0;

    protected override void OnInitialized()
    {
        clientes = GetClientes();

        totalPaginas = Convert.ToInt32(Math.Ceiling((double)DB.Clientes.ToList().Count() / 20));

        Console.WriteLine();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        int registrosPorPagina = 20;
        int registrosASkipar = registrosPorPagina * (newPageNumber - 1);
        clientes = DB.Clientes.Skip(registrosASkipar).Take(registrosPorPagina).ToList();
        await Task.Run(() => { paginaAtual = newPageNumber; });
    }

    private async void HandleCheckboxChange(ChangeEventArgs e)
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");

        await module.InvokeVoidAsync("selectAllCheckBoxes");
    }

    private void MostrarFiltros()
    {
        mostrarFiltros = !mostrarFiltros;
    }

    private IEnumerable<Cliente> GetClientes()
    {
        int registrosPorPagina = 20;
        int registrosASkipar = registrosPorPagina * (paginaAtual - 1);
        return DB.Clientes.Skip(registrosASkipar).Take(registrosPorPagina).ToList();
    }

    private void LimparFiltros()
    {
        filtroNome = string.Empty;
        filtroNomeInput = string.Empty;
        filtroEmail = string.Empty;
        filtroEmailInput = string.Empty;
        filtroTelefone = string.Empty;
        filtroTelefoneInput = string.Empty;
        filtroData = null;
        filtroDataInput = null;
        filtroBloqueado = string.Empty;
        filtroBloqueadoInput = string.Empty;

        clientes = DB.Clientes.ToList();
        
        totalPaginas = Convert.ToInt32(Math.Ceiling((double)clientes.Count() / 20));
    }

    private void LimparFiltroEspecifico(string nomeFiltro)
    {
        if (nomeFiltro == "nome")
        {
            filtroNome = string.Empty;
            filtroNomeInput = string.Empty;
        }
        else if (nomeFiltro == "email")
        {
            filtroEmail = string.Empty;
            filtroEmailInput = string.Empty;
        }
        else if (nomeFiltro == "telefone")
        {
            filtroTelefone = string.Empty;
            filtroTelefoneInput = string.Empty;
        }
        else if (nomeFiltro == "data")
        {
            filtroData = null;
            filtroDataInput = null;
        }
        else if (nomeFiltro == "bloqueado")
        {
            filtroBloqueado = string.Empty;
            filtroBloqueadoInput = string.Empty;
        }

        totalPaginas = Convert.ToInt32(Math.Ceiling((double)clientes.Count() / 20));
    }

    private void FiltrarClientes()
    {
        clientes = GetClientes();
        if (filtroNomeInput != "")
        {
            filtroNome = filtroNomeInput;
            clientes = FiltrarPorNomeRazao();
        }
        if (filtroEmailInput != "")
        {
            filtroEmail = filtroEmailInput;
            clientes = FiltrarPorEmail(clientes);
        }
        if (filtroTelefoneInput != "")
        {
            filtroTelefone = filtroTelefoneInput;
            clientes = FiltrarPorTelefone(clientes);
        }
        if (filtroDataInput is not null)
        {
            filtroData = filtroDataInput;
            clientes = FiltrarPorData(clientes);
        }
        if (filtroBloqueadoInput != "")
        {
            filtroBloqueado = filtroBloqueadoInput;
            clientes = FiltrarPorBloqueado(clientes);
        }

        totalPaginas = Convert.ToInt32(Math.Ceiling((double)clientes.Count() / 20));

        mostrarFiltros = false;
    }

    private IEnumerable<Cliente> FiltrarPorNomeRazao()
    {
        return DB.Clientes.Where(x => x.NomeClienteRazaoSocial.Contains(filtroNome));
    }

    private IEnumerable<Cliente> FiltrarPorEmail(IEnumerable<Cliente> clientes)
    {
        return clientes.Where(x => x.Email.Contains(filtroEmail));
    }

    private IEnumerable<Cliente> FiltrarPorTelefone(IEnumerable<Cliente> clientes)
    {
        return clientes.Where(x => x.Telefone.Contains(filtroTelefone));
    }

    private IEnumerable<Cliente> FiltrarPorData(IEnumerable<Cliente> clientes)
    {
        return clientes.Where(x => x.DataCadastro == filtroData);
    }

    private IEnumerable<Cliente> FiltrarPorBloqueado(IEnumerable<Cliente> clientes)
    {
        if (filtroBloqueado == "Sim")
        {
            return clientes.Where(x => x.Bloqueado == true);
        }
        else if (filtroBloqueado == "Nao")
        {
            return clientes.Where(x => x.Bloqueado == false);
        }

        return clientes;
    }

    private void AtualizarFiltroNome(ChangeEventArgs e)
    {
        filtroNomeInput = e.Value.ToString();
    }

    private void AtualizarFiltroEmail(ChangeEventArgs e)
    {
        filtroEmailInput = e.Value.ToString();
    }

    private void AtualizarFiltroTelefone(ChangeEventArgs e)
    {
        filtroTelefoneInput = e.Value.ToString();
    }

    private void AtualizarFiltroData(ChangeEventArgs e)
    {
        filtroDataInput = DateTime.Parse(e.Value.ToString());
    }

    private void AtualizarFiltroBloqueado(ChangeEventArgs e)
    {
        filtroBloqueadoInput = e.Value.ToString();
    }
}