@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject SmartHint.Data.SmartHintDbContext DB
@using SmartHint.Models

<PageTitle>Início</PageTitle>

<div class="d-flex align-items-center justify-content-between mb-4">
    <h4 class="w-50">
        Consulte os seus Clientes cadastrados na
        sua Loja ou realize o cadastro de novos Clientes
    </h4>

    <button class="btn_menu">Filtrar</button>
    <a class="btn_menu" href="clientes/create">Adicionar Cliente</a>
</div>

<Grid TItem="Cliente"
    Class="table table-hover table-bordered table-striped"
    DataProvider="ClientesDataProvider"
    AllowPaging="true"
    PageSize="20"
    AllowSorting="true"
    AllowSelection="true"
    SelectionMode="GridSelectionMode.Multiple"
    SelectedItemsChanged="OnSelectedItemsChanged"
    Responsive="true"
    EmptyText="Nenhum cliente cadastrado.">

    <GridColumn TItem="Cliente" HeaderText="Nome do Cliente/Razão Social" PropertyName="NomeClienteRazaoSocial" SortKeySelector="item => item.NomeClienteRazaoSocial">
        @context.NomeClienteRazaoSocial
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="E-mail" PropertyName="Email" SortKeySelector="item => item.Email">
        @context.Email
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Telefone" PropertyName="Telefone" SortKeySelector="item => item.Telefone">
        @context.Telefone
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Bloqueado" PropertyName="Bloqueado" SortKeySelector="item => item.Bloqueado">
        @context.Bloqueado
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Ações">
        <a href="@($"clientes/edit?id={@context.Id}")">Editar</a>
    </GridColumn>
</Grid>

@code {
    private HashSet<Cliente> clientesSelecionados = new();

    private IEnumerable<Cliente> clientes = default!;

    private async Task<GridDataProviderResult<Cliente>> ClientesDataProvider(GridDataProviderRequest<Cliente> request)
    {
        if (clientes is null)
            clientes = GetClientes();

        return await Task.FromResult(request.ApplyTo(clientes));
    }

    private IEnumerable<Cliente> GetClientes()
    {
        return DB.Clientes.ToList();
    }

    private Task OnSelectedItemsChanged(HashSet<Cliente> clientes)
    {
        clientesSelecionados = clientes is not null && clientes.Any() ? clientes : new();
        return Task.CompletedTask;
    }
}