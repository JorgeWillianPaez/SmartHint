@page "/clientes/create"
@inject SmartHint.Data.SmartHintDbContext DB
@using SmartHint.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Cliente</PageTitle>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<h2>Cadastrar cliente</h2>

<hr />
<div class="row">
    <div>
        <EditForm method="post" Model="Cliente" OnValidSubmit="AddCliente" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <!-- <ValidationSummary class="text-danger" /> -->
            <fieldset class="mb-5">
                <legend>Informações principais</legend>
                <div class="d-flex mb-3 justify-content-between">
                    <div class="input_padrao">
                        <label for="nomeclienterazaosocial" class="form-label">Nome do Cliente/Razão Social:</label>
                        <Tooltip Title="Nome completo ou Razão Social do Cliente." Placement="TooltipPlacement.Left">
                            <InputText id="nomeclienterazaosocial" @bind-Value="Cliente.NomeClienteRazaoSocial" class="form-control" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.NomeClienteRazaoSocial" class="text-danger" />
                    </div>
                    <div class="input_padrao">
                        <label for="email" class="form-label">E-mail:</label>
                        <Tooltip Title="E-mail do Cliente." Placement="TooltipPlacement.Right">
                            <InputText id="email" @bind-Value="Cliente.Email" class="form-control" type="email" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.Email" class="text-danger" />
                    </div>
                </div>
                <div class="d-flex justify-content-between">
                    <div class="input_padrao">
                        <label for="telefone" class="form-label">Telefone:</label>
                        <Tooltip Title="Telefone do Cliente." Placement="TooltipPlacement.Left">
                            <InputMask id="telefone" @bind-Value="Cliente.Telefone" class="form-control" data-mask="(00)00000-0000" onkeypress="return event.charCode >= 48 && event.charCode <= 57" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.Telefone" class="text-danger" />
                    </div>
                    <div class="input_padrao">
                        <label for="dataCadastro" class="form-label">Data de Cadastro:</label>
                        <InputDate id="dataCadastro" @bind-Value="Cliente.DataCadastro" disabled class="form-control" />
                    </div>
                </div>
            </fieldset>
            <fieldset class="mb-5">
                <legend>Informações pessoais</legend>
                <div class="d-flex mb-3 justify-content-between">
                    <div class="input_padrao">
                        <label for="tipopessoa" class="form-label">Tipo de Pessoa:</label>
                        <Tooltip Title="Selecione o tipo de Pessoa" Placement="TooltipPlacement.Left">
                            <InputSelect id="tipopessoa" @bind-Value="Cliente.TipoPessoa" class="form-control" @oninput="@((args) => HandleSelectChange(args))">
                                <option value="Física">Física</option>
                                <option value="Jurídica">Jurídica</option>
                            </InputSelect>
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.TipoPessoa" class="text-danger" />
                    </div>
                    <div class="input_padrao">
                        <label for="cpfcnpj" class="form-label">CPF/CNPJ:</label>
                        <Tooltip Title="Insira o CPF ou o CNPJ do Cliente." Placement="TooltipPlacement.Right">
                            <InputText id="cpfcnpj" @bind-Value="Cliente.CPFCNPJ" class="form-control" onkeypress="return event.charCode >= 48 && event.charCode <= 57" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.CPFCNPJ" class="text-danger" />
                    </div>
                </div>
                <div class="d-flex mb-3 justify-content-between">
                    <div class="input_padrao">
                        <label for="inscricaoestadual" class="form-label">Inscrição Estadual:</label>
                        <Tooltip Title="Inscrição Estadual do Cliente, selecionar Isento caso assim for." Placement="TooltipPlacement.Left">
                            <InputMask id="inscricaoestadual" @bind-Value="Cliente.InscricaoEstadual" data-mask="000.000.000.000" disabled="@inscricaoEstadualDisabled" class="form-control" onkeypress="return event.charCode >= 48 && event.charCode <= 57" />
                        </Tooltip>
                        <!-- <ValidationMessage For="() => Cliente.InscricaoEstadual" class="text-danger" /> -->
                    </div>
                    @if (Cliente.TipoPessoa == "Física")
                    {
                        <div class="input_padrao">
                            <label for="genero" class="form-label">Gênero:</label>
                            <Tooltip Title="Selecione o gênero do Cliente." Placement="TooltipPlacement.Right">
                                <InputSelect id="genero" @bind-Value="Cliente.Genero" class="form-control">
                                    <option value="" disabled selected >Selecione...</option>
                                    <option value="Masculino">Masculino</option>
                                    <option value="Feminino">Feminino</option>
                                    <option value="Outro">Outro</option>
                                </InputSelect>
                            </Tooltip>
                            <ValidationMessage For="() => Cliente.Genero" class="text-danger" />
                        </div>
                    }
                </div>
                <div class="d-flex justify-content-between mb-3">
                    <div>
                        <div class="d-flex justify-content-between">
                            <label for="isento" class="form-label">Isento:</label>
                            <input id="isento" type="checkbox" disabled="@isentoDisabled" checked="@Cliente.Isento" class="form-check-input" @onchange="@((ChangeEventArgs args) => HandleCheckboxChange(args))" />
                            <ValidationMessage For="() => Cliente.Isento" class="text-danger" />
                        </div>
                        <div>
                            <label for="bloqueado" class="form-label">Bloqueado:</label>
                            <Tooltip Title="Bloquear o acesso do Cliente na sua Loja." Placement="TooltipPlacement.Left">
                                <InputCheckbox id="bloqueado" @bind-Value="Cliente.Bloqueado" class="form-check-input" />
                            </Tooltip>
                            <ValidationMessage For="() => Cliente.Bloqueado" class="text-danger" />
                        </div>
                    </div>
                    @if (Cliente.TipoPessoa == "Física")
                    {
                        <div class="input_padrao">
                        <label for="dataNascimento" class="form-label">Data de Nascimento:</label>
                        <Tooltip Title="Data de nascimento do Cliente." Placement="TooltipPlacement.Right">
                            <InputDate id="dataNascimento" @bind-Value="Cliente.DataNascimento" class="form-control" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.Genero" class="text-danger" />
                    </div>
                    }
                </div>
            </fieldset>
            <fieldset>
                <legend>Senha de Acesso</legend>
                <div class="d-flex mb-5 justify-content-between">
                    <div class="input_padrao">
                        <label for="senha" class="form-label">Senha:</label>
                        <Tooltip Title="Cadastre a senha de acesso do seu Cliente." Placement="TooltipPlacement.Left">
                            <InputText id="senha" @bind-Value="Cliente.Senha" class="form-control" type="password" />
                        </Tooltip>
                        <ValidationMessage For="() => Cliente.Senha" class="text-danger" />
                    </div>
                    <div class="input_padrao">
                        <label for="confirmarSenha" class="form-label">Confirmar senha:</label>
                        <InputText id="confirmarSenha" @bind-Value="Cliente.ConfirmarSenha" class="form-control" type="password" />
                        <ValidationMessage For="() => Cliente.ConfirmarSenha" class="text-danger" />
                    </div>
                </div>
                <div class="d-flex justify-content-end">
                    <a class="btn btn-primary text-decoration-none me-2" href="/">Voltar</a>
                    <button type="submit" class="btn btn-primary">Adicionar Cliente</button>
                </div>
            </fieldset>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public Cliente Cliente { get; set; } = new Cliente { DataCadastro = DateTime.Today };
    private bool inscricaoEstadualDisabled = false;
    private bool isentoDisabled = false;
    private IJSObjectReference? module;
    List<ToastMessage> messages = new List<ToastMessage>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/ClientePages/Create.razor.js");

            await module.InvokeVoidAsync("mask");
        }
    }

    private void ShowMessage(ToastType toastType, string mensagem) => messages.Add(CreateToastMessage(toastType, mensagem));

    private ToastMessage CreateToastMessage(ToastType toastType, string mensagem)
    => new ToastMessage
        {
            Type = toastType,
            Message = mensagem,
        };

    private async Task AddCliente()
    {
        if (EmailJaExiste())
        {
            ShowMessage(ToastType.Danger, "Este e-mail já está cadastrado para outro Cliente");
            return;
        }

        if (CPFCNPJaExiste())
        {
            ShowMessage(ToastType.Danger, "Este CPF/CNPJ já está cadastrado para outro Cliente");
            return;
        }

        if (Cliente.InscricaoEstadual != "")
        {
            if (InscricaoJaExiste())
            {
                ShowMessage(ToastType.Danger, "Esta Inscrição Estadual já está cadastrada para outro Cliente");
                return;
            }
        }

        if (Cliente.Isento == false)

            Cliente.DataCadastro = DateTime.Now;

        DB.Clientes.Add(Cliente);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }

    private bool EmailJaExiste()
    {
        return DB.Clientes.Any(x => x.Email == Cliente.Email);
    }

    private bool CPFCNPJaExiste()
    {
        return DB.Clientes.Any(x => x.CPFCNPJ == Cliente.CPFCNPJ);
    }

    private bool InscricaoJaExiste()
    {
        return DB.Clientes.Any(x => x.InscricaoEstadual == Cliente.InscricaoEstadual);
    }

    private void HandleCheckboxChange(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            Cliente.InscricaoEstadual = "";
            inscricaoEstadualDisabled = true;
        } else
        {
            inscricaoEstadualDisabled = false;
        }
    }

    private void HandleSelectChange(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();

        if (selectedValue == "Jurídica")
        {
            Cliente.Genero = "";
            Cliente.DataNascimento = null;
        } else
        {
            isentoDisabled = false;
        }
    }
}
