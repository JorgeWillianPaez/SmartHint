@page "/clientes/delete"
@inject SmartHint.Data.SmartHintDbContext DB
@using SmartHint.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Deletar cliente</h1>

<div>
    <hr />
    @if (cliente is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <div class="d-flex justify-content-between">
            <dl class="col" >
                <dt>Nome do Cliente/Razão Social</dt>
                <dd>@cliente.NomeClienteRazaoSocial</dd>
            </dl>
            <dl class="col" >
                <dt>E-mail</dt>
                <dd>@cliente.Email</dd>
            </dl>
        </div>
        <div class="d-flex justify-content-between">
            <dl class="col" >
                <dt>Telefone</dt>
                <dd>@cliente.Telefone</dd>
            </dl>
            <dl class="col" >
                <dt>Tipo de Pessoa</dt>
                <dd>@cliente.TipoPessoa</dd>
            </dl>
        </div>
        <div class="d-flex justify-content-between">
            <dl class="col" >
                <dt>CPF/CNPJ</dt>
                <dd>@cliente.CPFCNPJ</dd>
            </dl>
            <dl class="col" >
                <dt>Inscrição Estadual</dt>
                <dd>@cliente.InscricaoEstadual</dd>
            </dl>
        </div>
        <div class="d-flex justify-content-between">
            <dl class="col" >
                <dt>Isento</dt>
                @if (cliente.Isento == true)
                {
                    <dd>Sim</dd>
                }
                else
                {
                    <dd>Não</dd>
                }
            </dl>
            <dl class="col" >
                <dt>Gênero</dt>
                <dd>@cliente.Genero</dd>
            </dl>
        </div>
        <div class="d-flex justify-content-between">
            <dl class="col" >
                <dt>Bloqueado</dt>
                @if (cliente.Bloqueado == true)
                {
                    <dd>Sim</dd>
                }
                else
                {
                    <dd>Não</dd>
                }
            </dl>
            <dl class="col" >
                <dt>Senha</dt>
                <dd>**********</dd>
            </dl>
        </div>
        <EditForm method="post" Model="cliente" OnValidSubmit="DeleteCliente" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(cliente is null)">Deletar</button> |
            <a class="btn btn-primary" href="/">Voltar</a>
        </EditForm>
    }
</div>

@code {
    Cliente? cliente;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cliente = await DB.Clientes.FirstOrDefaultAsync(m => m.Id == Id);

        if (cliente is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCliente()
    {
        DB.Clientes.Remove(cliente!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }
}
